lambda = lambda,
var_scale = var_scale)
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
set.seed(145)
p <- 100
k <- 10
m <- 17
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
Z_init <- rnorm(k) / 10
pi_Z <- c(pi_vals, Z_init)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-10, -0.1, length = 8)
b_seq <- seq(0.1, 10, length = 8)
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
set.seed(145)
p <- 100
k <- 10
m <- 17
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
Z_init <- rnorm(k) / 10
pi_Z <- c(pi_vals, Z_init)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-10, -0.1, length = 8)
b_seq <- seq(0.1, 10, length = 8)
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
devtools::load_all()
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
devtools::load_all()
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
devtools::load_all()
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
optim_out1 <- optim(Z_new, fn = only_Z, scale_val = scale_val, pi_vals = pi_new,
lambda = lambda, alpha = alpha, Y = Y, a_seq = a_seq,
method = "BFGS",
b_seq = b_seq, sig_diag = sig_diag, control = list(fnscale = -1))
optim_out1
optim_out1$par
optim_out$par
pi_Z_old
only_Z <- function(Z, pi_vals, scale_val, lambda, alpha, Y, a_seq, b_seq, sig_diag) {
pi_Z <- c(pi_vals, Z, scale_val)
llike <- succotash_llike_unif(pi_Z = pi_Z, lambda = lambda,
alpha = alpha, Y = Y, a_seq = a_seq,
b_seq = b_seq, sig_diag = sig_diag,
var_scale = TRUE)
return(llike)
}
only_Z_grad <- function(Z, pi_vals, scale_val, lambda, alpha, Y, a_seq, b_seq, sig_diag) {
pi_Z <- c(pi_vals, Z, scale_val)
grad_final <- unif_grad_simp(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,  sig_diag = sig_diag,
a_seq = a_seq, b_seq = b_seq, var_scale = TRUE)
return(grad_final)
}
unif_grad_simp <- function(pi_Z, lambda, alpha, Y,  sig_diag, left_seq = NULL, right_seq = NULL,
a_seq = NULL, b_seq = NULL, var_scale = TRUE) {
assertthat::assert_that(!((is.null(left_seq) | is.null(right_seq)) &
(is.null(a_seq) | is.null(b_seq))))
if (is.null(left_seq) | is.null(right_seq)) {
left_seq <- c(a_seq, rep(0, length = length(b_seq) + 1))
right_seq <- c(rep(0, length = length(a_seq) + 1), b_seq)
}
M <- length(left_seq)
p <- nrow(Y)
if (var_scale) {
k <- length(pi_Z) - M - 1
scale_val <- pi_Z[length(pi_Z)]
} else {
k <- length(pi_Z) - M
scale_val <- 1
}
pi_current <- pi_Z[1:M]
if (k != 0) {
Z_current <- matrix(pi_Z[(M + 1):(M + k)], nrow = k)
}
assertthat::are_equal(length(left_seq), length(right_seq))
assertthat::are_equal(length(lambda), M)
assertthat::assert_that(all(lambda >= 1))
assertthat::assert_that(scale_val > 0)
assertthat::are_equal(sum(pi_current), 1, tol = 10 ^ -4)
sig_diag <- sig_diag * scale_val
az <- alpha %*% Z_current
resid_vec <- Y - az
null_spot <- which(abs(left_seq) < 10^-12 & abs(right_seq) < 10^-12)
left_means  <- matrix(rep(left_seq, p), nrow = p,byrow = TRUE)
right_means <- matrix(rep(right_seq, p), nrow = p,byrow = TRUE)
quants <- matrix(rep(resid_vec, M), nrow = p, byrow = FALSE)
sd_mat <- matrix(rep(sig_diag, M), nrow = p, byrow = FALSE)
dnorm_mat_left  <- dnorm(x = quants, mean = left_means, sd = sd_mat)
dnorm_mat_right <- dnorm(x = quants, mean = right_means, sd = sd_mat)
dnorm_diff_mat <- dnorm_mat_right[, -null_spot] - dnorm_mat_left[, -null_spot]
dnorm_diff_mat_scaled <- matrix(NA, nrow = p, ncol = M)
dnorm_diff_mat_scaled[, -null_spot] <-
dnorm_diff_mat %*% diag(1 / (right_seq[-null_spot] - left_seq[-null_spot]))
assertthat::are_equal(dnorm_mat_left[, null_spot], dnorm_mat_right[, null_spot])
dnorm_diff_mat_scaled[, null_spot] <- dnorm_mat_left[, null_spot] * (resid_vec / sig_diag)
dnorm_diff_mat_pluspi <- dnorm_diff_mat_scaled %*% diag(pi_current)
top_vec <- rowSums(dnorm_diff_mat_pluspi)
mean_mat_left  <- outer(c(resid_vec), left_seq, "-")
mean_mat_right <- outer(c(resid_vec), right_seq, "-")
fkj_mat <- matrix(NA, nrow = p, ncol = M)
var_mat <- matrix(rep(sqrt(sig_diag), M - length(null_spot)), nrow = p, byrow = FALSE)
pnorm_diff <- pnorm(mean_mat_left[, -null_spot], mean = 0, sd = var_mat) -
pnorm(mean_mat_right[, -null_spot], mean = 0, sd = var_mat)
pnorm_ratio <- pnorm_diff %*% diag(1 / (right_seq[-null_spot] - left_seq[-null_spot]))
fkj_mat[, -null_spot] <- pnorm_ratio
assertthat::are_equal(mean_mat_left[, null_spot], mean_mat_right[, null_spot])
fkj_mat[, null_spot] <- dnorm(mean_mat_left[, null_spot], mean = 0, sd = sqrt(sig_diag))
mat_lik <- fkj_mat %*% diag(pi_vals)
bottom_vec <- rowSums(mat_lik)
weights_vec <- top_vec / bottom_vec
weighted_alpha <- diag(weights_vec) %*% alpha
grad_final <- colSums(weighted_alpha)
if (var_scale) {
augmented_grad <- c(rep(0, length = M), grad_final, 0)
} else {
augmented_grad <- c(rep(0, length = M), grad_final)
}
return(grad_final)
}
optim_out <- optim(par = Z_new, fn = only_Z, gr = only_Z_grad, scale_val = scale_val,
pi_vals = pi_new,
lambda = lambda, alpha = alpha, Y = Y, a_seq = a_seq, b_seq = b_seq,
sig_diag = sig_diag, control = list(fnscale = -1))
devtools::load_all()
rm(list = ls())
set.seed(145)
p <- 100
k <- 10
m <- 17
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
Z_init <- rnorm(k) / 10
pi_Z <- c(pi_vals, Z_init)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-10, -0.1, length = 8)
b_seq <- seq(0.1, 10, length = 8)
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
devtools::load_all()
set.seed(145)
p <- 100
k <- 10
m <- 17
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
Z_init <- rnorm(k) / 10
pi_Z <- c(pi_vals, Z_init)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-10, -0.1, length = 8)
b_seq <- seq(0.1, 10, length = 8)
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
zhat <- fit_out[(length(pi_vals) + 1):length(fit_out)]
pihat <- fit_out[1:(length(pi_vals))]
em_out <- uniform_succ_em(Y = Y, alpha = alpha, sig_diag = sig_diag, a_seq = a_seq,
b_seq = b_seq, pi_init = pihat, Z_init = zhat,
lambda = lambda,
var_scale = var_scale)
em_piZ <- c(em_out$pi_new, em_out$Z_new)
succotash_llike_unif(pi_Z = em_piZ, lambda = lambda,
Y = Y, alpha = alpha, a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = FALSE)
succotash_llike_unif(pi_Z = fit_out, lambda = lambda,
Y = Y, alpha = alpha, a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = FALSE)
zhat <- fit_out[(length(pi_vals) + 1):length(fit_out)]
plot(Z, zhat)
abline(0, 1)
expect_true(cor(zhat, c(Z)) > 0.9)
pi_Z <- c(pi_Z, 1)
var_scale <- TRUE
fit_out2 <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale)
zhat2 <- fit_out2[(length(pi_vals) + 1):(length(fit_out2) - 1)]
em_out <- uniform_succ_em(Y = Y, alpha = alpha, sig_diag = sig_diag, a_seq = a_seq,
b_seq = b_seq, pi_init = pi_vals, Z_init = Z, lambda = lambda,
var_scale = var_scale)
em_piZ <- c(em_out$pi_new, em_out$Z_new, em_out$scale_val)
fit_out3 <- fit_succotash_unif_coord(pi_Z = em_piZ, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale)
succotash_llike_unif(pi_Z = em_piZ, lambda = lambda,
Y = Y, alpha = alpha, a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = TRUE)
succotash_llike_unif(pi_Z = fit_out2, lambda = lambda,
Y = Y, alpha = alpha, a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = TRUE)
expect_true(cor(zhat2, Z) > 0.9)
plot(zhat2, Z)
plot(em_out$Z_new, Z)
expect_true(cor(zhat2, Z) > 0.9)
plot(zhat2, Z)
plot(em_out$Z_new, Z)
set.seed(145)
p <- 100
k <- 10
m <- 17
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
Z_init <- rnorm(k) / 10
pi_Z <- c(pi_vals, Z_init)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-10, -0.1, length = 8)
b_seq <- seq(0.1, 10, length = 8)
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
set.seed(145)
p <- 1000
k <- 10
m <- 17
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
Z_init <- rnorm(k) / 10
pi_Z <- c(pi_vals, Z_init)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-10, -0.1, length = 8)
b_seq <- seq(0.1, 10, length = 8)
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
?optim
devtools::load_all()
set.seed(145)
p <- 1000
k <- 10
m <- 17
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
Z_init <- rnorm(k) / 10
pi_Z <- c(pi_vals, Z_init)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-10, -0.1, length = 8)
b_seq <- seq(0.1, 10, length = 8)
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
devtools::load_all()
set.seed(145)
p <- 1000
k <- 10
m <- 17
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
Z_init <- rnorm(k) / 10
pi_Z <- c(pi_vals, Z_init)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-10, -0.1, length = 8)
b_seq <- seq(0.1, 10, length = 8)
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
zhat <- fit_out[(length(pi_vals) + 1):length(fit_out)]
pihat <- fit_out[1:(length(pi_vals))]
em_out <- uniform_succ_em(Y = Y, alpha = alpha, sig_diag = sig_diag, a_seq = a_seq,
b_seq = b_seq, pi_init = pihat, Z_init = zhat,
lambda = lambda,
var_scale = var_scale)
em_piZ <- c(em_out$pi_new, em_out$Z_new)
succotash_llike_unif(pi_Z = em_piZ, lambda = lambda,
Y = Y, alpha = alpha, a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = FALSE)
succotash_llike_unif(pi_Z = fit_out, lambda = lambda,
Y = Y, alpha = alpha, a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = FALSE)
zhat <- fit_out[(length(pi_vals) + 1):length(fit_out)]
plot(Z, zhat)
abline(0, 1)
plot(em_piZ, zhat)
plot(em_out$Z_new, zhat)
abline(0, 1)
expect_true(cor(zhat, c(Z)) > 0.9)
pi_Z <- c(pi_Z, 1)
var_scale <- TRUE
fit_out2 <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale)
zhat2 <- fit_out2[(length(pi_vals) + 1):(length(fit_out2) - 1)]
em_out <- uniform_succ_em(Y = Y, alpha = alpha, sig_diag = sig_diag, a_seq = a_seq,
b_seq = b_seq, pi_init = pi_vals, Z_init = Z, lambda = lambda,
var_scale = var_scale)
em_piZ <- c(em_out$pi_new, em_out$Z_new, em_out$scale_val)
fit_out3 <- fit_succotash_unif_coord(pi_Z = em_piZ, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale)
succotash_llike_unif(pi_Z = em_piZ, lambda = lambda,
Y = Y, alpha = alpha, a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = TRUE)
succotash_llike_unif(pi_Z = fit_out2, lambda = lambda,
Y = Y, alpha = alpha, a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = TRUE)
expect_true(cor(zhat2, Z) > 0.9)
plot(zhat2, Z)
plot(em_out$Z_new, Z)
expect_true(cor(zhat2, Z) > 0.9)
cor(zhat2, Z)
set.seed(145)
p <- 100
k <- 10
m <- 17
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
Z_init <- rnorm(k) / 10
pi_Z <- c(pi_vals, Z_init)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-10, -0.1, length = 8)
b_seq <- seq(0.1, 10, length = 8)
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
zhat <- fit_out[(length(pi_vals) + 1):length(fit_out)]
pihat <- fit_out[1:(length(pi_vals))]
expect_true(cor(zhat, c(Z)) > 0.9)
pi_Z <- c(pi_Z, 1)
var_scale <- TRUE
fit_out2 <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale)
zhat2 <- fit_out2[(length(pi_vals) + 1):(length(fit_out2) - 1)]
expect_true(cor(zhat2, Z) > 0.9)
cor(zhat2, Z)
set.seed(245)
p <- 100
k <- 10
m <- 17
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
Z_init <- rnorm(k) / 10
pi_Z <- c(pi_vals, Z_init)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-10, -0.1, length = 8)
b_seq <- seq(0.1, 10, length = 8)
fit_out <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale, newt_itermax = 4)
zhat <- fit_out[(length(pi_vals) + 1):length(fit_out)]
pihat <- fit_out[1:(length(pi_vals))]
expect_true(cor(zhat, c(Z)) > 0.9)
pi_Z <- c(pi_Z, 1)
var_scale <- TRUE
fit_out2 <- fit_succotash_unif_coord(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = var_scale)
zhat2 <- fit_out2[(length(pi_vals) + 1):(length(fit_out2) - 1)]
expect_true(cor(zhat2, Z) > 0.9)
expect_true(cor(zhat2, Z) > 0.8)
cor(zhat2, Z)
expect_true(cor(zhat2, Z) > 0.85)
cor(zhat, c(Z))
expect_true(cor(zhat, c(Z)) > 0.95)
set.seed(775)
p <- 20
k <- 5
sig_diag <- abs(rnorm(p))
Z        <- matrix(rnorm(k))
alpha    <- matrix(rnorm(p * k), nrow = p)
Y        <- 2 * rnorm(p) + alpha %*% Z
a_seq <- -4:-1
b_seq <- 1:4
left_seq  <- c(a_seq, rep(0, length(b_seq) + 1))
right_seq <- c(rep(0, length(a_seq) + 1), b_seq)
pi_vals   <- abs(rnorm(length(left_seq)))
pi_vals   <- pi_vals / sum(pi_vals)
scale_val <- 1
pi_Z <- c(pi_vals, c(Z), scale_val)
lambda <- rep(1, length = length(pi_vals))
grad1 <- unif_grad_simp(pi_Z = pi_Z, lambda = lambda, alpha = alpha,
Y = Y, left_seq = left_seq, right_seq = right_seq,
sig_diag = sig_diag, var_scale = TRUE)
grad2 <- unif_grad_llike(pi_Z = pi_Z, lambda = lambda, alpha = alpha,
Y = Y, a_seq = a_seq, b_seq = b_seq,
sig_diag = sig_diag, var_scale = TRUE)
expect_equal(grad1, grad2)
grad1
grad2
devtools::load_all()
lintr::lint_package()
lintr::lint_package()
devtools::test()
devtools::check()
?:::
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::test()
devtools::check()
?`:::`
?':::'
?`:::`
devtools::check()
devtools::check()
devtools::check()
install.packages("REBayes")
devtools::check()
devtools::document()
devtools::install_github("stephenslab/flashr", auth_token = "5ef31651dd4cb26c6d0c0f56e42ef6b14bd91b1b")
devtools::check()
devtools::install()
q()
