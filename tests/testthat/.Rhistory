pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
pi_Z <- c(pi_vals, Z, scale_val)
var_scale <- TRUE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- -4:-1
b_seq <- 1:4
pzout <- uniform_succ_em(Y = Y, alpha = alpha,
sig_diag = sig_diag, a_seq = a_seq,
b_seq = b_seq, print_ziter = TRUE,
var_scale = var_scale)
expect_true(all(pzout$pi_new > 0))
expect_true(all(pzout$pi_new < 1))
expect_equal(sum(pzout$pi_new), 1)
var_scale
set.seed(1200)
p <- 7
k <- 2
sig_diag <- abs(rnorm(p))
Z <- matrix(rnorm(k))
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- -4:-1
b_seq <- 1:4
pi_vals <- abs(rnorm(length(a_seq) + length(b_seq) + 1))
pi_vals <- pi_vals / sum(pi_vals)
pi_Z <- c(pi_vals, Z)
lambda <- rep(1, length = length(pi_vals))
pzout <- succotash_unif_fixed(pi_Z = pi_Z, lambda = lambda, alpha = alpha, Y = Y,
a_seq = a_seq, b_seq = b_seq, sig_diag = sig_diag,
var_scale = FALSE)
expect_equal(sum(pzout[1:length(pi_vals)]), 1)
expect_true(all(pzout[1:length(pi_vals)] < 1))
expect_true(all(pzout[1:length(pi_vals)] > 0))
skip("skipping test")
set.seed(533)
p <- 11
n <- 5
k <- 1
q <- 2
pi_vals <- c(0.5, 0.3, 0.2)
tau_seq <- c(0, 1, 2)
beta0 <- matrix(rnorm((q - 1) * p), nrow = q - 1)
beta1 <- draw_beta(pi_vals = pi_vals, tau_seq = tau_seq, p = p)
beta  <- rbind(beta0, beta1)
X     <- matrix(rnorm(n * q), nrow = n)
Z     <- matrix(rnorm(n * k), nrow = n)
alpha <- matrix(rnorm(k * p), nrow = k)
E     <- matrix(rnorm(n * p), nrow = n)
Y     <- X %*% beta + Z %*% alpha + E
suc0 <- succotash(Y = Y, X = X, k = k, two_step = FALSE, var_scale = TRUE,
mix_type = "uniform")
suc0 <- succotash(Y = Y, X = X, k = k, two_step = FALSE, var_scale = TRUE,
mix_type = "normal")
new_scale <- suc0$scale_val * n / (n - k - q)
suc1 <- succotash(Y = Y, X = X, k = k, two_step = FALSE, inflate_var = new_scale,
var_scale = FALSE, mix_type = "uniform")
suc2 <- succotash(Y = Y, X = X, k = k, two_step = TRUE, var_scale = TRUE,
mix_type = "uniform")
devtools::load_all()
suc0 <- succotash(Y = Y, X = X, k = k, two_step = FALSE, var_scale = TRUE,
mix_type = "uniform")
suc_out_bland <- uniform_succ_given_alpha(Y = Y1_scaled,
alpha = alpha_scaled,
sig_diag = sig_diag_scaled,
num_em_runs = num_em_runs,
em_z_start_sd = z_start_sd,
lambda_type = lambda_type,
em_itermax = em_itermax,
var_scale = var_scale)
Y1_scaled
alpha_scaled
sig_diag
sig_diag_scaled
length(sig_diag_scaled)
length(sig_diag)
num_em_runs
em_z_start_sd
z_start_sd
var_scale
var_scale = FALSE
suc_out_bland <- uniform_succ_given_alpha(Y = Y1_scaled,
alpha = alpha_scaled,
sig_diag = sig_diag_scaled,
num_em_runs = num_em_runs,
em_z_start_sd = z_start_sd,
lambda_type = lambda_type,
em_itermax = em_itermax,
var_scale = var_scale)
suc_out_bland
var_scale = TRUE
suc_out_bland <- uniform_succ_given_alpha(Y = Y1_scaled,
alpha = alpha_scaled,
sig_diag = sig_diag_scaled,
num_em_runs = num_em_runs,
em_z_start_sd = z_start_sd,
lambda_type = lambda_type,
em_itermax = em_itermax,
var_scale = var_scale)
devtools::load_all()
options(warn = 1)
suc0 <- succotash(Y = Y, X = X, k = k, two_step = FALSE, var_scale = TRUE,
mix_type = "uniform")
set.seed(533)
p <- 11
n <- 5
k <- 1
q <- 2
pi_vals <- c(0.5, 0.3, 0.2)
tau_seq <- c(0, 1, 2)
beta0 <- matrix(rnorm((q - 1) * p), nrow = q - 1)
beta1 <- draw_beta(pi_vals = pi_vals, tau_seq = tau_seq, p = p)
beta  <- rbind(beta0, beta1)
X     <- matrix(rnorm(n * q), nrow = n)
Z     <- matrix(rnorm(n * k), nrow = n)
alpha <- matrix(rnorm(k * p), nrow = k)
E     <- matrix(rnorm(n * p), nrow = n)
Y     <- X %*% beta + Z %*% alpha + E
suc0 <- succotash(Y = Y, X = X, k = k, two_step = FALSE, var_scale = TRUE,
mix_type = "uniform")
set.seed(533)
p <- 11
n <- 5
k <- 1
q <- 2
pi_vals <- c(0.5, 0.3, 0.2)
tau_seq <- c(0, 1, 2)
beta0 <- matrix(rnorm((q - 1) * p), nrow = q - 1)
beta1 <- draw_beta(pi_vals = pi_vals, tau_seq = tau_seq, p = p)
beta  <- rbind(beta0, beta1)
X     <- matrix(rnorm(n * q), nrow = n)
Z     <- matrix(rnorm(n * k), nrow = n)
alpha <- matrix(rnorm(k * p), nrow = k)
E     <- matrix(rnorm(n * p), nrow = n)
Y     <- X %*% beta + Z %*% alpha + E
suc0 <- succotash(Y = Y, X = X, k = k, two_step = FALSE, var_scale = TRUE,
mix_type = "uniform")
options(warn = 2)
set.seed(533)
p <- 11
n <- 5
k <- 1
q <- 2
pi_vals <- c(0.5, 0.3, 0.2)
tau_seq <- c(0, 1, 2)
beta0 <- matrix(rnorm((q - 1) * p), nrow = q - 1)
beta1 <- draw_beta(pi_vals = pi_vals, tau_seq = tau_seq, p = p)
beta  <- rbind(beta0, beta1)
X     <- matrix(rnorm(n * q), nrow = n)
Z     <- matrix(rnorm(n * k), nrow = n)
alpha <- matrix(rnorm(k * p), nrow = k)
E     <- matrix(rnorm(n * p), nrow = n)
Y     <- X %*% beta + Z %*% alpha + E
suc0 <- succotash(Y = Y, X = X, k = k, two_step = FALSE, var_scale = TRUE,
mix_type = "uniform")
recover
recover()
recover()
recover()
fun_unif_scale()
Y
az
alpha
Z_new
alpha %*% Z_new
sig_diag
Tkj
a_seq
b_seq
oout <- optim(par = scale_val, fn = fun_unif_scale,
Y = Y, az = alpha %*% Z_new, sig_diag = sig_diag,
Tkj = Tkj, a_seq = a_seq, b_seq = b_seq,
method = "Brent", lower = 0, upper = 10,
control = list(fnscale = -1, maxit = 10))
oout
succ_out <- succotash_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag, var_scale = TRUE)
options(warn = 0)
succ_out <- succotash_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag, var_scale = TRUE)
alpha
sig_diag
set.seed(1454)
p <- 7
k <- 2
m <- 11
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
pi_Z <- c(pi_vals, Z)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
alpha
a_seq <- seq(-1, -0.1, length = 5)
b_seq <- seq(0.1, 1, length = 5)
succ_out <- succotash_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag, var_scale = TRUE)
succ_out
set.seed(1454)
p <- 101
k <- 5
m <- 11
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
pi_Z <- c(pi_vals, Z)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-1, -0.1, length = 5)
b_seq <- seq(0.1, 1, length = 5)
succ_out <- succotash_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag, var_scale = TRUE)
succ_out
succ_out <- uniform_succ_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag, var_scale = TRUE)
set.seed(1454)
p <- 11
k <- 5
m <- 11
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
pi_Z <- c(pi_vals, Z)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-1, -0.1, length = 5)
b_seq <- seq(0.1, 1, length = 5)
succ_out <- uniform_succ_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag, var_scale = TRUE)
set.seed(1454)
p <- 11
k <- 5
m <- 11
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
pi_Z <- c(pi_vals, Z)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-1, -0.1, length = 5)
b_seq <- seq(0.1, 1, length = 5)
succ_out <- uniform_succ_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag, var_scale = TRUE)
warnings()
devtools::load_all()
set.seed(145)
p <- 1000
k <- 20
m <- 11
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
pi_Z <- c(pi_vals, Z)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-1, -0.1, length = 5)
b_seq <- seq(0.1, 1, length = 5)
succ_out <- uniform_succ_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag,
var_scale = FALSE, print_ziter = TRUE, em_itermax = 700)
Z_new
hessian_val
gradient_val
pnorm_diff_left
pnorm_diff_right
any(is.na(pnorm_diff_left))
any(is.na(pnorm_diff_right)
)
any(is.na(dnorm_diff_right))
any(is.na(dnorm_diff_left))
pnorm_diff_left == 0
any(pnorm_diff_left == 0)
zero_means_right
zero_means_right
right_means
zero_means_right
pnorm_diff_right
zero_means_right
zero_means_right
right_means
pnorm(-274)
pnorm(-37)
pnorm(-76)
dnorm(274)
dpratios_left
plot(c(pnorm_diff_left), c(dpratios_left))
plot(left_means, c(dpratios_left))
plot(c(pdiff_left), c(dpratios_left))
plot(c(pnorm_diff_left), c(dpratios_left))
plot(c(pnorm_diff_left), c(dpratios_left), xlim = c(0, 10^-3))
plot(c(pnorm_diff_left), c(dpratios_left), xlim = c(0, 10^-60))
plot(c(pnorm_diff_left), c(dpratios_left), xlim = c(0, 10^-100))
plot(c(pnorm_diff_left), c(dpratios_left), xlim = c(0, 10^-200))
plot(c(pnorm_diff_left), c(dpratios_left), xlim = c(0, 10^-400))
plot(c(pnorm_diff_left), c(dpratios_left), xlim = c(0, 10^-600))
plot(c(pnorm_diff_left), c(dpratios_left), xlim = c(0, 10^-100))
plot(c(pnorm_diff_left), c(dpratios_left), xlim = c(0, 10^-150))
min(c(pnorm_diff_left))
min(c(pnorm_diff_left[pnorm_diff != 0]))
min(c(pnorm_diff_left[pnorm_diff_left != 0]))
plot(c(pnorm_diff_left), c(dpratios_left), xlim = c(0, 10^-300))
plot(c(pnorm_diff_right), c(dpratios_right), xlim = c(0, 10^-300))
dpratios_left
dpratios_left[is.na(dpratios_left)]
dpratios_left[is.na(dpratios_left)] <- min(dpratios_left, na.rm = TRUE)
dpratios_left
dpratios_left[dpratios_left == -Inf] <- min(dpratios_left[dpratios_left == -Inf], na.rm = TRUE)
dpratios_left
dpratios_left[dpratios_left == -Inf] <- min(dpratios_left[dpratios_left != -Inf], na.rm = TRUE)
dpratios_left
dpratios_right[is.na(dpratios_right)] <- min(dpratios_right, na.rm = TRUE)
dpratios_right[dpratios_right == -Inf] <- min(dpratios_right[dpratios_right != -Inf], na.rm = TRUE)
dpratios_right
max(dpratios_left)
max(dpratios_right)
dnorm_diff_left <- diag(1 / sqrt(sig_diag)) %*%
(dnorm(zero_means_left) - dnorm(left_means))
dnorm_diff_right <- diag(1 / sqrt(sig_diag)) %*%
(dnorm(right_means) - dnorm(zero_means_right))
dpratios_left <- dnorm_diff_left / pnorm_diff_left
dpratios_right <- dnorm_diff_right / pnorm_diff_right
dpratios_right
hist(c(dpratios_right))
hist(c(dpratios_left))
zero_part <- (Y - az) / sig_diag
alpha_weights <- rowSums(Tkj * cbind(dpratios_left, zero_part, dpratios_right))
alpha_weights
dpratios_left[dpratios_left == Inf] <- max(dpratios_left[dpratios_left != Inf], na.rm = TRUE)
dpratios_right[dpratios_right == Inf] <- min(dpratios_right[dpratios_right != Inf], na.rm = TRUE)
zero_part <- (Y - az) / sig_diag
alpha_weights <- rowSums(Tkj * cbind(dpratios_left, zero_part, dpratios_right))
gradient_val <- colSums(diag(alpha_weights) %*% alpha)
##calculate Hessian
top_left <- left_means * dnorm(left_means) -
zero_means_left *  dnorm(zero_means_left)
top_right <- zero_means_right * dnorm(zero_means_right) -
right_means * dnorm(right_means)
sum1 <- top_left / pnorm_diff_left - dpratios_left ^ 2
sum2 <- top_right / pnorm_diff_right - dpratios_right ^ 2
sum0 <- -1 / sig_diag
diag_weights <- rowSums(Tkj * cbind(sum1, sum0, sum2))
hessian_val <- t(alpha) %*% diag(diag_weights) %*% alpha
Z_new <- Z_old -  mult_val * solve(hessian_val) %*% gradient_val
Z_new
dnorm_diff_left <- diag(1 / sqrt(sig_diag)) %*%
(dnorm(zero_means_left) - dnorm(left_means))
dnorm_diff_right <- diag(1 / sqrt(sig_diag)) %*%
(dnorm(right_means) - dnorm(zero_means_right))
dpratios_left <- dnorm_diff_left / pnorm_diff_left
dpratios_right <- dnorm_diff_right / pnorm_diff_right
## ad-hoc adjustment for numerical instability of truncated normal. May need to remove -------------------
dpratios_left[is.na(dpratios_left)] <- min(dpratios_left, na.rm = TRUE)
dpratios_left[dpratios_left == -Inf] <- min(dpratios_left[dpratios_left != -Inf], na.rm = TRUE)
dpratios_left[dpratios_left == Inf] <- max(dpratios_left[dpratios_left != Inf], na.rm = TRUE)
dpratios_right[is.na(dpratios_right)] <- min(dpratios_right, na.rm = TRUE)
dpratios_right[dpratios_right == -Inf] <- min(dpratios_right[dpratios_right != -Inf], na.rm = TRUE)
dpratios_right[dpratios_right == Inf] <- min(dpratios_right[dpratios_right != Inf], na.rm = TRUE)
dpratios_right
zero_part <- (Y - az) / sig_diag
alpha_weights <- rowSums(Tkj * cbind(dpratios_left, zero_part, dpratios_right))
alpha_weights
Rkj
Tkj
any(is.na(Tkj))
gradient_val <- colSums(diag(alpha_weights) %*% alpha)
gradient_val
top_left <- left_means * dnorm(left_means) -
zero_means_left *  dnorm(zero_means_left)
top_right <- zero_means_right * dnorm(zero_means_right) -
right_means * dnorm(right_means)
top_left
topr_right
top_right
sum1 <- top_left / pnorm_diff_left - dpratios_left ^ 2
sum2 <- top_right / pnorm_diff_right - dpratios_right ^ 2
sum0 <- -1 / sig_diag
diag_weights <- rowSums(Tkj * cbind(sum1, sum0, sum2))
diag_weights
dpratios_left
dnorm_diff_left
is.na(dnorm_diff_left)
any(is.na(dnorm_diff_left))
any(is.na(dnorm_diff_right))
top_left
sum1
sum1 <- top_left / pnorm_diff_left - dpratios_left ^ 2
sum2 <- top_right / pnorm_diff_right - dpratios_right ^ 2
sum0 <- -1 / sig_diag
## ad-hoc adjustment for numerical instability of truncated normal. May need to remove -------------------
sum1[is.na(sum1)] <- 0
sum2[is.na(sum2)] <- 0
sum1[sum1 == Inf] <- max(sum1[sum1 != Inf])
sum2[sum2 == Inf] <- max(sum2[sum2 != Inf])
sum1[sum1 == -Inf] <- min(sum1[sum1 != -Inf])
sum2[sum2 == -Inf] <- min(sum2[sum2 != -Inf])
diag_weights <- rowSums(Tkj * cbind(sum1, sum0, sum2))
diag_weights
dpratios_left[is.na(dpratios_left)] <- 0
dpratios_left[dpratios_left == -Inf] <- min(dpratios_left[dpratios_left != -Inf], na.rm = TRUE)
dpratios_left[dpratios_left == Inf] <- max(dpratios_left[dpratios_left != Inf], na.rm = TRUE)
dpratios_right[is.na(dpratios_right)] <- 0
dpratios_right[dpratios_right == -Inf] <- min(dpratios_right[dpratios_right != -Inf], na.rm = TRUE)
dpratios_right[dpratios_right == Inf] <- min(dpratios_right[dpratios_right != Inf], na.rm = TRUE)
## -------------------------------------------------------------------------------------------------------
zero_part <- (Y - az) / sig_diag
dnorm_diff_left <- diag(1 / sqrt(sig_diag)) %*%
(dnorm(zero_means_left) - dnorm(left_means))
dnorm_diff_right <- diag(1 / sqrt(sig_diag)) %*%
(dnorm(right_means) - dnorm(zero_means_right))
dpratios_left <- dnorm_diff_left / pnorm_diff_left
dpratios_right <- dnorm_diff_right / pnorm_diff_right
## ad-hoc adjustment for numerical instability of truncated normal. May need to remove -------------------
dpratios_left[is.na(dpratios_left)] <- 0
dpratios_left[dpratios_left == -Inf] <- min(dpratios_left[dpratios_left != -Inf], na.rm = TRUE)
dpratios_left[dpratios_left == Inf] <- max(dpratios_left[dpratios_left != Inf], na.rm = TRUE)
dpratios_right[is.na(dpratios_right)] <- 0
dpratios_right[dpratios_right == -Inf] <- min(dpratios_right[dpratios_right != -Inf], na.rm = TRUE)
dpratios_right[dpratios_right == Inf] <- min(dpratios_right[dpratios_right != Inf], na.rm = TRUE)
## -------------------------------------------------------------------------------------------------------
zero_part <- (Y - az) / sig_diag
alpha_weights <- rowSums(Tkj * cbind(dpratios_left, zero_part, dpratios_right))
gradient_val <- colSums(diag(alpha_weights) %*% alpha)
##calculate Hessian
top_left <- left_means * dnorm(left_means) -
zero_means_left *  dnorm(zero_means_left)
top_right <- zero_means_right * dnorm(zero_means_right) -
right_means * dnorm(right_means)
sum1 <- top_left / pnorm_diff_left - dpratios_left ^ 2
sum2 <- top_right / pnorm_diff_right - dpratios_right ^ 2
sum0 <- -1 / sig_diag
## ad-hoc adjustment for numerical instability of truncated normal. May need to remove -------------------
sum1[is.na(sum1)] <- 0
sum2[is.na(sum2)] <- 0
sum1[sum1 == Inf] <- max(sum1[sum1 != Inf])
sum2[sum2 == Inf] <- max(sum2[sum2 != Inf])
sum1[sum1 == -Inf] <- min(sum1[sum1 != -Inf])
sum2[sum2 == -Inf] <- min(sum2[sum2 != -Inf])
## -------------------------------------------------------------------------------------------------------
diag_weights <- rowSums(Tkj * cbind(sum1, sum0, sum2))
hessian_val <- t(alpha) %*% diag(diag_weights) %*% alpha
Z_new <- Z_old -  mult_val * solve(hessian_val) %*% gradient_val
Z_new
z_diff <- sum(abs(Z_new - Z_old))
llike_new <- succotash_llike_unif(pi_Z = c(pi_new, Z_new, scale_val), lambda = lambda,
alpha = alpha, Y = Y, a_seq = a_seq,
b_seq = b_seq, sig_diag = sig_diag, var_scale = TRUE)
llike_new
devtools::load_all()
succ_out <- uniform_succ_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag,
var_scale = FALSE, print_ziter = TRUE, em_itermax = 700)
succ_out <- uniform_succ_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag,
var_scale = FALSE, print_ziter = TRUE, em_itermax = 50)
set.seed(145)
p <- 1000
k <- 20
m <- 11
lambda <- rep(1, length = m) ## nullpi weight
scale_val <- 1
pi_vals <- abs(rnorm(m))
pi_vals <- pi_vals / sum(pi_vals)
tau_seq <- seq(0, 4, length = m)
sig_diag <- abs(rnorm(p))
plot_new_ests <- FALSE
Z <- matrix(rnorm(k))
pi_Z <- c(pi_vals, Z)
var_scale <- FALSE
alpha <- matrix(rnorm(p * k), nrow = p)
Y <- 2 * rnorm(p) + alpha %*% Z
a_seq <- seq(-1, -0.1, length = 5)
b_seq <- seq(0.1, 1, length = 5)
succ_out <- uniform_succ_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag,
var_scale = FALSE, print_ziter = TRUE, em_itermax = 50)
plot(succ_out$Z, Z)
abline(c(0,1))
succ_out <- uniform_succ_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag,
var_scale = FALSE, print_ziter = TRUE, em_itermax = 50)
succ_out <- uniform_succ_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag,
var_scale = TRUE, print_ziter = TRUE, em_itermax = 50)
devtools::load_all()
succ_out <- uniform_succ_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag,
var_scale = TRUE, print_ziter = TRUE, em_itermax = 50)
warnings()
devtools::load_all()
succ_out <- uniform_succ_given_alpha(Y = Y, alpha = alpha, sig_diag = sig_diag,
var_scale = TRUE, print_ziter = TRUE, em_itermax = 50)
